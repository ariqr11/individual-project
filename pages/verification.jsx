import React from "react";
import Axios from 'axios'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { GoUnverified } from "react-icons/go";
import { Text, Menu, MenuButton, Avatar, AvatarBadge, MenuList, MenuGroup, MenuItem, Spinner, useToast } from '@chakra-ui/react'
import {
    Modal,
    ModalOverlay,
    ModalContent,
    ModalHeader,
    ModalFooter,
    ModalBody,
    ModalCloseButton
} from '@chakra-ui/react'
import { FaSignOutAlt } from 'react-icons/fa'
import { GiThreeFriends } from 'react-icons/gi'
import { BiMailSend } from "react-icons/bi";
import styles from '../styles/Home.module.css'

const VerificationPage = (props) => {
    const toast = useToast()
    const router = useRouter()
    const API_URL = "http://localhost:1997"
    const [loading, setLoading] = React.useState(true)
    const [dataUser, setDataUser] = React.useState('')
    const [verification, setVerification] = React.useState(false)
    const [toggleSpinVerif, setToggleSpinVerif] = React.useState(false)
    const [toggleSpinResend, setToggleSpinResend] = React.useState(false)

    const handleVerif = async () => {
        try {
            setToggleSpinVerif(true)
            let token = localStorage.getItem('verifToken');
            let res = await Axios.get(API_URL + `/users/verif`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }
            )
            if (res.data.idusers) {
                setDataUser(res.data)
                localStorage.setItem('socmedLog', res.data.token);
                toast({
                    title: "Verification Success",
                    position: 'top',
                    description: `You are Verified Now`,
                    status: "success",
                    duration: 3000,
                    isClosable: true
                })
                router.push({
                    pathname: '/timeline'
                })
            }
            setTimeOut(() => setToggleSpinVerif(false), 2000)
        } catch (error) {
            console.log(error)
        }
    }

    const handleResend = async () => {
        try {
            setToggleSpinResend(true)
            let token = localStorage.getItem('socmedLog');
            let res = await Axios.get(API_URL + `/users/resend`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }
            )
            console.log(res.data)
            if (res.data.idusers) {
                localStorage.setItem('verifToken', res.data.token);
                toast({
                    title: "Resend Success",
                    position: 'top',
                    description: `Check your Email to Verification`,
                    status: "success",
                    duration: 3000,
                    isClosable: true
                })
                setToggleSpinResend(false)
            }
        } catch (error) {
            console.log(error)
        }
    }

    const handleLogout = () => {
        let socmedLog = localStorage.getItem('socmedLog');
        if (socmedLog) {
            localStorage.setItem('socmedLog', null)
            router.push({
                pathname: '/'
            })
        }
    }

    const keepLogin = () => {
        let socmedLog = localStorage.getItem('socmedLog');
        if (socmedLog != "null") {
            Axios.get(API_URL + `/users/keep`, {
                headers: {
                    'Authorization': `Bearer ${socmedLog}`
                }
            })
                .then((res) => {
                    console.log(res.data)
                    if (res.data.idusers) {
                        localStorage.setItem('socmedLog', res.data.token);
                        setDataUser(res.data)

                    }
                }).catch((err) => {
                    console.log(err);
                })
        }
    }

    React.useEffect(() => {
        keepLogin()
        if (localStorage.getItem('verifToken') == props.token.verif) {
            setVerification(true)
        }
        setLoading(false)
    }, []);

    return <div>
        <Head>
            <title>Verification Link</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="logo.png" />
        </Head>
        <div>
            {loading ?
                <div className={styles.loading}>
                    <Spinner
                        thickness='4px'
                        speed='0.65s'
                        emptyColor='gray.200'
                        color='blue.500'
                        size='xl'
                    />
                </div> :
                <div>
                    {verification == true
                        ?
                        <div className='container w-100 bg-white'>
                            <div className='d-flex' style={{ marginBottom: 100 }}>
                                <GiThreeFriends size={50} />
                                <Menu>
                                    <MenuButton>
                                        <div className="d-flex ms-3">
                                            <Avatar name={dataUser.username} src={API_URL + dataUser.profilepicture}>
                                                <AvatarBadge boxSize='1em' bg='green.500' />
                                            </Avatar>
                                            <div className="row ">
                                                <Text className="text-dark col-12 fw-bold" style={{ fontFamily: 'monospace' }}>{dataUser.fullname}</Text>
                                                <Text className='text-dark col-12 fw-bold' style={{ fontFamily: 'monospace' }}>{dataUser.username}</Text>
                                            </div>
                                        </div>
                                    </MenuButton>
                                    <MenuList>
                                        <MenuGroup>
                                            <MenuItem onClick={handleLogout}>SignOut <FaSignOutAlt className="ms-3" /></MenuItem>
                                        </MenuGroup>
                                    </MenuList>
                                </Menu>
                            </div>
                            <GoUnverified size={200} className="m-auto" />
                            <p className="text-muted text-center">After Register, you can access all feature with verified account</p>
                            <br />
                            <button type="button" className="btn btn-outline-warning w-25 position-relative" style={{ marginLeft: 500 }} onClick={() => handleVerif()} >Verified Your Account</button>
                            <Modal isOpen={toggleSpinVerif} isCentered={true} size='xs'>
                                <ModalOverlay bg='blackAlpha.300'
                                    backdropFilter='blur(10px) hue-rotate(90deg)' />
                                <ModalContent className='align-items-center bg-transparent' >
                                    <Spinner
                                        thickness='4px'
                                        speed='0.65s'
                                        emptyColor='gray.200'
                                        color='blue.500'
                                        size='xl'
                                    />
                                </ModalContent>
                            </Modal>
                        </div>

                        :
                        <div className='container w-100 bg-white'>
                            <div className='d-flex' style={{ marginBottom: 100 }}>
                                <GiThreeFriends size={50} />
                                <Menu>
                                    <MenuButton>
                                        <div className="d-flex ms-3">
                                            <Avatar name={dataUser.username} src={API_URL + dataUser.profilepicture}>
                                                <AvatarBadge boxSize='1em' bg='green.500' />
                                            </Avatar>
                                            <div className="row ">
                                                <Text className="text-dark col-12 fw-bold" style={{ fontFamily: 'monospace' }}>{dataUser.fullname}</Text>
                                                <Text className='text-dark col-12 fw-bold' style={{ fontFamily: 'monospace' }}>{dataUser.username}</Text>
                                            </div>
                                        </div>
                                    </MenuButton>
                                    <MenuList>
                                        <MenuGroup>
                                            <MenuItem onClick={handleLogout}>SignOut <FaSignOutAlt className="ms-3" /></MenuItem>
                                        </MenuGroup>
                                    </MenuList>
                                </Menu>
                            </div>
                            <p className="fs-2 text-center">Your Link Are Expired</p>
                            <BiMailSend size={200} className="m-auto" />
                            <p className="text-muted text-center">you must resend link for Verification</p>
                            <br />
                            <button type="button" className="btn btn-success w-25 position-relative" style={{ marginLeft: 500 }} onClick={() => handleResend()} >Resend Link Verification</button>
                            <Modal isOpen={toggleSpinResend} isCentered={true} size='xs'>
                                <ModalOverlay bg='blackAlpha.300'
                                    backdropFilter='blur(10px) hue-rotate(90deg)' />
                                <ModalContent className='align-items-center bg-transparent' >
                                    <Spinner
                                        thickness='4px'
                                        speed='0.65s'
                                        emptyColor='gray.200'
                                        color='blue.500'
                                        size='xl'
                                    />
                                </ModalContent>
                            </Modal>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

export const getServerSideProps = async (context) => {
    try {
        console.log('ini context', context.query);
        return {
            props: {
                token: context.query
            }
        }
    } catch (error) {
        console.log(error)
    }
}

export default VerificationPage